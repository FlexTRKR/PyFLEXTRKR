# Example Hermes configuration file

### Define properties of the storage devices
devices:
  # The name of the device.
  # It can be whatever the user wants, there are no special names
  ram:
    # The mount point of each device. RAM should be the empty string. For block
    # devices, this is the directory where Hermes will create buffering files. For
    # object storage or cloud targets, this will be a url.
    mount_point: ""

    # The maximum buffering capacity in MiB of each device.
    capacity: 50MB

    # The size of the smallest available buffer in KiB. In general this should be
    # the page size of your system for byte addressable storage, and the block size
    # of the storage device for block addressable storage.
    block_size: 4KB

    # The number of blocks (the size of which is chosen in block_sizes_kb) that each
    # device should contain for each slab (controlled by num_slabs). This allows for
    # precise control of the distibution of buffer sizes.
    slab_sizes: [ 4KB, 16KB, 64KB, 1MB ]

    # The maximum theoretical bandwidth (as advertised by the manufacturer) in
    # Possible units: KBps, MBps, GBps
    bandwidth: 6000MBps

    # The latency of each device (as advertised by the manufacturer).
    # Possible units: ns, us, ms, s
    latency: 15us

    # For each device, indicate '1' if it is shared among nodes (e.g., burst
    # buffers), or '0' if it is per node (e.g., local NVMe).
    is_shared_device: false

    # For each device, the minimum and maximum percent capacity threshold at which
    # the BufferOrganizer will trigger. Decreasing the maximum thresholds will cause
    # the BufferOrganizer to move data to lower devices, making more room in faster
    # devices (ideal for write-heavy workloads). Conversely, increasing the minimum
    # threshold will cause data to be moved from slower devices into faster devices
    # (ideal for read-heavy workloads). For example, a maximum capacity threshold of
    # 0.8 would have the effect of always keeping 20% of the device's space free for
    # incoming writes. Conversely, a minimum capacity threshold of 0.3 would ensure
    # that the device is always at least 30% occupied.
    borg_capacity_thresh: [0.0, 1.0]

  nvme:
    mount_point: "./"
    capacity: 100MB
    block_size: 4KB
    slab_sizes: [ 4KB, 16KB, 64KB, 1MB ]
    bandwidth: 1GBps
    latency: 600us
    is_shared_device: false
    borg_capacity_thresh: [ 0.0, 1.0 ]

  ssd:
    mount_point: "./"
    capacity: 100MB
    block_size: 4KB
    slab_sizes: [ 4KB, 16KB, 64KB, 1MB ]
    bandwidth: 500MBps
    latency: 1200us
    is_shared_device: false
    borg_capacity_thresh: [ 0.0, 1.0 ]

  pfs:
    mount_point: "./"
    capacity: 100MB
    block_size: 64KB # The stripe size of PFS
    slab_sizes: [ 4KB, 16KB, 64KB, 1MB ]
    bandwidth: 100MBps # Per-device bandwidth
    latency: 200ms
    is_shared_device: true
    borg_capacity_thresh: [ 0.0, 1.0 ]

# Define the maximum amount of memory Hermes can use for non-buffering tasks.
# This includes metadata management and memory allocations.
# This memory will not be preallocated, so if you don't know, 0 indicates
# any amount of memory
max_memory: 0g

### Define properties of RPCs
rpc:
  # A path to a file containing a list of server names, 1 per line. If your
  # servers are named according to a pattern (e.g., server-1, server-2, etc.),
  # prefer the `rpc_server_base_name` and `rpc_host_number_range` options. If this
  # option is not empty, it will override anything in `rpc_server_base_name`.
  host_file: ""

  # Host names can be defined using the following syntax:
  # ares-comp-[0-9]-40g will convert to ares-comp-0-40g, ares-comp-1-40g, ...
  # ares-comp[00-09] will convert to ares-comp-00, ares-comp-01, ...
  host_names: ["localhost"]

  # The RPC protocol. This must come from the documentation of the specific RPC
  # library in use.
  protocol: "ofi+sockets"

  # RPC domain name for verbs transport. Blank for tcp.
  domain: ""

  # Desired RPC port number.
  port: 8080

  # The number of handler threads for each RPC server.
  num_threads: 4

### Define properties of the BORG
buffer_organizer:
  # The number of threads used in the background organization of internal Hermes buffers.
  num_threads: 1

  # Interval (ms) where blobs are checked for flushing
  flush_period: 1024

  # Interval (ms) where blobs are checked for re-organization
  blob_reorg_period: 1024

  ## What does "recently accessed" mean?
  # Time when score is equal to 1 (seconds)
  recency_min: 0
  # Time when score is equal to 0 (seconds)
  recency_max: 60

  ## What does "frequently accessed" mean?
  # Number of accesses for score to be equal to 1 (count)
  freq_max: 15
  # Number of accesses for score to be equal to 0 (count)
  freq_min: 0

### Define the default data placement policy
dpe:
  # Choose Random, RoundRobin, or MinimizeIoTime
  default_placement_policy: "MinimizeIoTime"

  # If true (1) the RoundRobin placement policy algorithm will split each Blob
  # into a random number of smaller Blobs.
  default_rr_split: 0

### Define I/O tracing properties
tracing:
  enabled: false
  output: ""

### Define prefetcher properties
prefetch:
  enabled: false
  io_trace_path: ""
  apriori_schema_path: ""
  epoch_ms: 50
  is_mpi: false

### Define mdm properties
mdm:
  # This represents the number of blobs and buckets before collisions start
  # to happen in the unordered_map tables.
  est_blob_count: 100000
  est_bucket_count: 100000
  est_num_traits: 256

# The shared memory prefix for the hermes shared memory segment. A username
# will be automatically appended.
shmem_name: "/hermes_shm_"

# The interval in milliseconds at which to update the global system view.
system_view_state_update_interval_ms: 1000

### Define the names of the traits to search LD_LIBRARY_PATH for
traits:
  - "hermes_posix_io_client"
  - "hermes_stdio_io_client"
  - "hermes_mpiio_io_client"
  - "hermes_example_trait"
  - "hermes_prefetcher_trait"