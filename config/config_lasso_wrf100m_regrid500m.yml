---
# LASSO WRF simulated radar cell tracking configuration file

# Regrid input reflectivity
run_regridreflectivity: True
# Identify features to track
run_idfeature: True
# Tracking steps to run
run_advection: True
# Track single consecutive feature files
run_tracksingle: True
# Run tracking for all files
run_gettracks: True
# Calculate feature statistics
run_trackstats: True
# Map tracking to pixel files
run_mapfeature: True
# Regrid pixel files to original grid
run_regridmask: True

# Parallel processing set up
# run_parallel: 1 (local cluster), 2 (Dask MPI)
run_parallel: 1
nprocesses: 12  # Number of processors to use if run_parallel=1
dask_tmp_dir: '/tmp'  # Dask temporary directory if run_parallel=1
timeout: 360  # [seconds] Dask timeout limit

# Start/end date and time
startdate: '20181204.1200'
enddate: '20181205.0000'
# Ensemble member name
ensmember: 'gefs18'
# Time frequency of input used for tracking (e.g., '5min', '15min')
sample_time_freq: '5min'

# Specify tracking input data date/time string format
# This is the preprocessed file that contains Tb & rainrate
# E.g., databasename20181101.011503.nc --> yyyymodd.hhmmss
# E.g., databasename2018-11-01_01:15:00 --> yyyy-mo-dd_hh:mm:ss
time_format: 'yyyymodd??_?hhmmss'
raw_databasename: 'corlasso_sub_cloudOnHamsl.M1.m1.'
databasename: 'reg_refl_'

# Input files directory
clouddata_path: '/gpfs/wolf/cli120/proj-shared/zfeng/cacti/les/20181204/gefs18/run/merged/'
# Working directory for the tracking data
root_path: '/gpfs/wolf/cli120/proj-shared/zfeng/cacti/les/20181204/gefs18/'
# Working sub-directory names
tracking_path_name: 'tracking'
stats_path_name: 'stats'
pixel_path_name: 'celltracking'

# Range mask variable (for compatibility purpose with radar data only)
rangemask_varname: 'mask110'

# Specify types of feature being tracked
# This adds additional feature-specific statistics to be computed
feature_type: 'radar_cells'

# Advection calculation parameters
advection_field_threshold: 10    # radar reflectivity threshold [dBZ]
advection_med_filt_len: 9         # median filter length for advection speed time seires [number of points]
advection_max_movement_mps: 60    # maximum advection speed allowed [m/s]
advection_mask_method: 'greater'  # masking method
advection_buffer: 30  # number of grid points around the edge of domain to buffer
advection_size_threshold: 10  # number of min valid points to calculate advection
advection_tiles: [1,1]   # number of tiles to calculate advection [y,x]
advection_filename: 'advection_'

# Cell identification parameters
# Parameter in Steiner
# The background reflectivity fall off point in the cosine fucntion,
# if background reflectivity > absConvThres [dBZ], the grid point is a convective core
absConvThres: 60
# Minimum difference to background reflectivity [dB] in the cosine function
minZdiff: 10
# Any grid point reflectivity > truncZconvThres [dBZ] is automatically a convective core
truncZconvThres: 55
# These two reflectivity values sets up the step function background Ze values
# They control the dilation of grids surrounding the convective cores to be included as "convective region"
mindBZuse: 25
dBZforMaxConvRadius: 60
# Convective radius step-function increment [km]
conv_rad_increment: 0.5
# Convective radius step-function start value [km]
conv_rad_start: 1.0
# Background reflectivity step-function increment [dB]
bkg_refl_increment: 5
# Maximum convective radius dilation [km]
maxConvRadius: 5
# Define a set of radii for final step of convective cell expansion [km]
# This is for the purpose of making the convective region larger for tracking convective cells
radii_expand: [1,2,3,4,5]
# Weak echo threshold [dBZ]
weakEchoThres: 15
# Background radius to calculate background reflectivity intensity [km]
bkgrndRadius: 11
# Minimum area threshold to be a convective core [km^2]
min_corearea: 4
# Number of vertical level gaps allowed in calculating echo-top height
echotop_gap: 4
# Minimum height above surface elevation to filter the data
sfc_dz_min: 500
# Maximum height above surface [m] to calculate low-level max reflectivity
# (similar to lowest-level composite reflectiivty)
sfc_dz_max: 3000
# Set equivalent radar sensitivity [dBZ]
radar_sensitivity: 0.0
# Flag to output additional Steiner variables for diagnostic purpose
return_diag: True
# Radar file data dimensions and reflectivity variable name
dx: 500  # meter
dy: 500  # meter
x_dimname: "west_east"
y_dimname: "south_north"
z_dimname: "HAMSL"
x_varname: "XLONG"
y_varname: "XLAT"
z_varname: "HAMSL"
reflectivity_varname: 'REFL_10CM'
composite_reflectivity_varname: 'REFL_10CM_MAX'
# Input data source: 'radar', 'wrf', 'wrf_regrid'
input_source: 'wrf_regrid'

# Specify data structure
datatimeresolution: 0.08333     # hour
pixel_radius: 0.5      # km
time_dimname: 'Time'
ref_varname: 'dbz_comp'

# Tracking parameters
timegap: 0.5           # hour
othresh: 0.3           # overlap percentage threshold
maxnclouds: 1000       # Maximum number of clouds in one snapshot
nmaxlinks: 10          # Maximum number of clouds that any single cloud can be linked to
duration_range: [2, 200]   # A vector [minlength,maxlength] to specify the duration range for the tracks
# Flag to remove short-lived tracks [< min(duration_range)] that are not mergers/splits with other tracks
# 0:keep all tracks; 1:remove short tracks
remove_shorttracks: 1
# Set this flag to 1 to write a dense (2D) trackstats netCDF file
# Note that for datasets with lots of tracks, the memory consumption could be very large
trackstats_dense_netcdf: 1

# Define tracked feature variable names
feature_varname: 'feature_number'
nfeature_varname: 'nfeatures'
featuresize_varname: 'npix_feature'

# Track statistics output file dimension names
tracks_dimname: 'tracks'
times_dimname: 'times'
fillval: -9999
pixeltracking_filebase: 'celltracks_'
